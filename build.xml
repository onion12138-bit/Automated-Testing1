<?xml version="1.0" encoding="UTF-8"?>
<project name="jmeter-ant-automation" default="run" basedir=".">
    
    <!-- ========== 环境配置 ========== -->
    <property environment="env"/>  <!-- 加载系统环境变量 -->
    
    <!-- 时间戳生成 -->
    <tstamp>
        <format property="timestamp" pattern="yyyy-MM-dd_HH-mm" locale="en"/>
    </tstamp>
    
    <!-- ========== 路径配置 ========== -->
    <!-- JMeter 安装路径 -->
    <property name="jmeter.home" value="${basedir}/apache-jmeter-5.4.3"/>
    
    <!-- 测试脚本路径 -->
    <property name="jmeter.test.dir" value="${basedir}/jmeter-script"/>
    
    <!-- 报告输出路径 -->
    <property name="jmeter.result.jtl.dir" value="${basedir}/jmeter-results/jtl"/>
    <property name="jmeter.result.html.dir" value="${basedir}/jmeter-results/html"/>
    <property name="jmeter.result.detail.dir" value="${basedir}/jmeter-results/detail"/>
    
    <!-- 报告名称 -->
    <property name="summary.report.name" value="JMeter-Summary-Report-${timestamp}"/>
    <property name="detail.report.name" value="JMeter-Detail-Report-${timestamp}"/>
    
    <!-- ========== Classpath 配置 ========== -->
    <path id="xslt.classpath">
        <fileset dir="${jmeter.home}/lib" includes="xalan*.jar"/>
        <fileset dir="${jmeter.home}/lib" includes="serializer*.jar"/>
    </path>
    
    <!-- ========== 主任务 ========== -->
    <target name="run" depends="git-update, clean, test, report, package-reports, send-email-with-attachment"
            description="更新代码 → 清理旧报告 → 执行测试 → 生成报告 → 打包报告 → 发送邮件"/>
    
    <!-- ========== Git 更新任务 ========== -->
    <target name="git-update" description="从Git仓库拉取最新代码">
        <echo>正在检查Git仓库状态...</echo>
        
        <!-- 检查是否有远程仓库 -->
        <exec executable="git" dir="${basedir}" outputproperty="git.remotes" failonerror="false">
            <arg value="remote"/>
        </exec>
        
        <!-- 如果有远程仓库则拉取，否则跳过 -->
        <condition property="has.remote">
            <not>
                <equals arg1="${git.remotes}" arg2=""/>
            </not>
        </condition>
        
        <antcall target="git-pull"/>
        <antcall target="git-status"/>
    </target>
    
    <!-- Git拉取子任务 -->
    <target name="git-pull" if="has.remote">
        <echo>检测到远程仓库，正在拉取最新代码...</echo>
        <exec executable="git" dir="${basedir}" failonerror="true">
            <arg value="pull"/>
            <arg value="origin"/>
            <arg value="master"/>
        </exec>
        <echo>代码更新完成！</echo>
    </target>
    
    <!-- Git状态检查 -->
    <target name="git-status">
        <echo>Git仓库状态:</echo>
        <exec executable="git" dir="${basedir}" failonerror="false">
            <arg value="log"/>
            <arg value="--oneline"/>
            <arg value="-1"/>
        </exec>
        <condition property="no.remote">
            <not>
                <isset property="has.remote"/>
            </not>
        </condition>
        <antcall target="git-local-status"/>
    </target>
    
    <!-- 本地仓库状态 -->
    <target name="git-local-status" if="no.remote">
        <echo>本地Git仓库，跳过远程拉取操作</echo>
    </target>
    
    <!-- ========== 清理旧报告 ========== -->
    <target name="clean" description="删除旧的测试报告">
        <echo>清理旧报告...</echo>
        <delete dir="${jmeter.result.jtl.dir}"/>
        <delete dir="${jmeter.result.html.dir}"/>
        <delete dir="${jmeter.result.detail.dir}"/>
        <mkdir dir="${jmeter.result.jtl.dir}"/>
        <mkdir dir="${jmeter.result.html.dir}"/>
        <mkdir dir="${jmeter.result.detail.dir}"/>
    </target>
    
    <!-- ========== 执行 JMeter 测试 ========== -->
    <target name="test" description="运行 JMeter 测试">
        <echo>执行 JMeter 测试...</echo>
        
        <!-- 定义 JMeter Ant 任务 -->
        <taskdef name="jmeter" 
                 classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask">
            <classpath>
                <fileset dir="${jmeter.home}/lib" includes="ant-jmeter-*.jar"/>
            </classpath>
        </taskdef>
        
        <!-- 执行测试 -->
        <jmeter jmeterhome="${jmeter.home}"
                resultlog="${jmeter.result.jtl.dir}/${summary.report.name}.jtl">
            
            <!-- 设置 JVM 参数 -->
            <jvmarg value="-Xms1024m"/>
            <jvmarg value="-Xmx4096m"/>
            <jvmarg value="-Djava.awt.headless=true"/>

            <!-- 添加调试参数 -->
            <property name="log_level.jmeter" value="DEBUG"/>
    	    <property name="log_level.jmeter.junit" value="DEBUG"/>
            
            <!-- 添加这些属性强制保存统计字段 -->
    	    <property name="jmeter.save.saveservice.latency" value="true"/>
            <property name="jmeter.save.saveservice.connect_time" value="true"/>
            <property name="jmeter.save.saveservice.bytes" value="true"/>
            <property name="jmeter.save.saveservice.sent_bytes" value="true"/>
            <property name="jmeter.save.saveservice.thread_counts" value="true"/>

            <!-- 测试计划配置 -->
            <property name="jmeter.save.saveservice.output_format" value="xml"/>
            <property name="jmeter.save.saveservice.response_data" value="true"/>
            <property name="jmeter.save.saveservice.samplerData" value="true"/>
            
            <!-- 指定测试脚本 -->
            <testplans dir="${jmeter.test.dir}" includes="*.jmx"/>
            
            <!-- 删除 generateReport 标签 -->
        </jmeter>
    </target>
    
    <!-- ========== 生成报告 ========== -->
    <target name="report" depends="test" description="生成 HTML 报告">
        <echo>生成测试报告...</echo>

        <!-- 生成汇总报告 -->
        <xslt in="${jmeter.result.jtl.dir}/${summary.report.name}.jtl"
               out="${jmeter.result.html.dir}/${summary.report.name}.html"
               style="${jmeter.home}/extras/jmeter-results-report_21.xsl">

            <!-- 添加这些参数解决 NaN -->

            <param name="minValue" expression="0"/>
            <param name="maxValue" expression="10000"/>


            <param name="showData" expression="y"/>
        </xslt>
        
        <!-- 生成详细报告 -->
        <xslt in="${jmeter.result.jtl.dir}/${summary.report.name}.jtl"
               out="${jmeter.result.detail.dir}/${detail.report.name}.html"
               style="${jmeter.home}/extras/jmeter.results.shanhe.me.xsl">

            <!-- 添加这些参数解决 NaN -->

            <param name="minValue" expression="0"/>
            <param name="maxValue" expression="10000"/>


            <param name="showData" expression="y"/>
        </xslt>
        
        <!-- 复制报告所需资源 -->
        <copy todir="${jmeter.result.html.dir}">
            <fileset dir="${jmeter.home}/extras">
                <include name="*.png"/>
                <include name="*.css"/>
            </fileset>
        </copy>
        
        <copy todir="${jmeter.result.detail.dir}">
            <fileset dir="${jmeter.home}/extras">
                <include name="*.png"/>
                <include name="*.css"/>
            </fileset>
        </copy>




        
        <echo>报告生成完成！</echo>
        <echo>汇总报告: ${jmeter.result.html.dir}/${summary.report.name}.html</echo>
        <echo>详细报告: ${jmeter.result.detail.dir}/${detail.report.name}.html</echo>
    </target>
    
    <!-- ========== 打包报告任务 ========== -->
    <target name="package-reports" depends="report" description="打包测试报告为ZIP文件">
        <echo>开始打包测试报告...</echo>
        
        <!-- 生成时间戳 -->
        <tstamp>
            <format property="package.timestamp" pattern="yyyyMMdd_HHmmss" locale="en"/>
        </tstamp>
        
        <!-- 设置ZIP文件路径 -->
        <property name="package.zip.path" value="/tmp/JMeter_Report_${package.timestamp}.zip"/>
        
        <!-- 执行打包脚本 -->
        <exec executable="bash" dir="${basedir}" failonerror="false">
            <arg value="package-reports.sh"/>
        </exec>
        
        <echo>报告打包完成: ${package.zip.path}</echo>
    </target>
    
    <!-- ========== 发送邮件任务（支持附件）========== -->
    <target name="send-email-with-attachment" depends="package-reports" description="发送包含报告附件的邮件">
        <echo>准备发送包含附件的测试结果邮件...</echo>
        
        <!-- 设置邮件相关变量 -->
        <property name="email.jtl.file" value="${jmeter.result.jtl.dir}/${summary.report.name}.jtl"/>
        <property name="email.html.file" value="${jmeter.result.html.dir}/${summary.report.name}.html"/>
        
        <!-- 检查测试是否成功 -->
        <condition property="test.status" value="SUCCESS" else="FAILED">
            <available file="${email.jtl.file}"/>
        </condition>
        
        <!-- 执行邮件发送脚本 -->
        <echo>发送邮件到: 2335327949@qq.com</echo>
        <echo>测试状态: ${test.status}</echo>
        <echo>JTL文件: ${email.jtl.file}</echo>
        <echo>HTML报告: ${email.html.file}</echo>
        <echo>ZIP附件: ${package.zip.path}</echo>
        
        <exec executable="bash" dir="${basedir}" failonerror="false">
            <arg value="send-email-with-attachment.sh"/>
            <arg value="${test.status}"/>
            <arg value="${email.jtl.file}"/>
            <arg value="${email.html.file}"/>
            <arg value="${package.zip.path}"/>
        </exec>
        
        <echo>包含附件的邮件发送任务完成！</echo>
    </target>
    
    <!-- ========== 发送邮件任务（已移除，统一使用带附件版本）========== -->
    <!-- 注释：为避免重复邮件，已将无附件版本移除，统一使用send-email-with-attachment -->
    <target name="send-email" depends="send-email-with-attachment" description="发送测试结果邮件（重定向到带附件版本）">
        <echo>邮件发送已重定向到带附件版本，避免重复发送</echo>
    </target>
</project>