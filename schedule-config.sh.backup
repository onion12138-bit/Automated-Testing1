#!/bin/bash

# ==========================================
# Ford Smart Badge 定时任务配置文件
# ==========================================
# 功能: 集中管理定时任务的所有配置
# 修改说明: 只需要修改这个文件中的配置即可
# ==========================================

# ==========================================
# ⚙️ 定时任务配置 - 在这里修改执行时间
# ==========================================
# 格式: 分钟 小时 日 月 星期
# 示例: 35 10 * * * 表示每天10:35执行
# ==========================================
SCHEDULE_MINUTE="45"    # 分钟 (0-59)
SCHEDULE_HOUR="15"      # 小时 (0-23)
SCHEDULE_DAY="*"        # 日 (1-31, *表示每天)
SCHEDULE_MONTH="*"      # 月 (1-12, *表示每月)
SCHEDULE_WEEKDAY="*"    # 星期 (0-7, *表示每天, 0和7都表示周日)

# ==========================================
# 📧 邮件配置
# ==========================================
EMAIL_RECIPIENT="2335327949@qq.com"  # 收件人邮箱

# ==========================================
# 📁 路径配置
# ==========================================
WORKSPACE_DIR="/Users/onion/Desktop/JmeterMac2"
SCRIPT_PATH="$WORKSPACE_DIR/schedule-daily-test.sh"
LOG_FILE="$WORKSPACE_DIR/daily-test.log"

# ==========================================
# 🔧 生成定时任务表达式
# ==========================================
SCHEDULE_EXPRESSION="$SCHEDULE_MINUTE $SCHEDULE_HOUR $SCHEDULE_DAY $SCHEDULE_MONTH $SCHEDULE_WEEKDAY"

# ==========================================
# 📊 显示配置信息
# ==========================================
show_config() {
    echo "========================================="
    echo "⚙️ 定时任务配置信息"
    echo "========================================="
    echo "🕐 执行时间: 每天 $SCHEDULE_HOUR:$SCHEDULE_MINUTE"
    echo "📅 定时表达式: $SCHEDULE_EXPRESSION"
    echo "📧 收件人: $EMAIL_RECIPIENT"
    echo "📁 工作目录: $WORKSPACE_DIR"
    echo "📄 日志文件: $LOG_FILE"
    echo "========================================="
}

# ==========================================
# 🔄 更新定时任务
# ==========================================
update_schedule() {
    echo "🔄 更新定时任务..."
    echo "$SCHEDULE_EXPRESSION $SCRIPT_PATH" | crontab -
    if [ $? -eq 0 ]; then
        echo "✅ 定时任务更新成功"
        echo "📅 新执行时间: 每天 $SCHEDULE_HOUR:$SCHEDULE_MINUTE"
    else
        echo "❌ 定时任务更新失败"
        return 1
    fi
}

# ==========================================
# 📋 显示当前定时任务
# ==========================================
show_current_schedule() {
    echo "📋 当前定时任务:"
    crontab -l 2>/dev/null || echo "❌ 没有设置定时任务"
}

# ==========================================
# 🧪 测试配置
# ==========================================
test_config() {
    echo "🧪 测试配置..."
    
    # 检查时间格式
    if [[ ! "$SCHEDULE_MINUTE" =~ ^[0-5]?[0-9]$ ]] || [ "$SCHEDULE_MINUTE" -gt 59 ]; then
        echo "❌ 分钟配置错误: $SCHEDULE_MINUTE (应为0-59)"
        return 1
    fi
    
    if [[ ! "$SCHEDULE_HOUR" =~ ^[0-9]|1[0-9]|2[0-3]$ ]] || [ "$SCHEDULE_HOUR" -gt 23 ]; then
        echo "❌ 小时配置错误: $SCHEDULE_HOUR (应为0-23)"
        return 1
    fi
    
    # 检查文件路径
    if [ ! -f "$SCRIPT_PATH" ]; then
        echo "❌ 脚本文件不存在: $SCRIPT_PATH"
        return 1
    fi
    
    echo "✅ 配置验证通过"
    show_config
}

# ==========================================
# 📝 使用说明
# ==========================================
show_usage() {
    echo "========================================="
    echo "📝 定时任务配置使用说明"
    echo "========================================="
    echo ""
    echo "🔧 修改执行时间:"
    echo "   编辑此文件中的 SCHEDULE_MINUTE 和 SCHEDULE_HOUR 变量"
    echo "   然后运行: ./schedule-config.sh update"
    echo ""
    echo "📋 可用命令:"
    echo "   show    - 显示当前配置"
    echo "   update  - 更新定时任务"
    echo "   test    - 测试配置"
    echo "   current - 显示当前定时任务"
    echo ""
    echo "📅 时间格式说明:"
    echo "   SCHEDULE_MINUTE: 分钟 (0-59)"
    echo "   SCHEDULE_HOUR:   小时 (0-23)"
    echo "   示例: 35 10 表示每天10:35执行"
    echo ""
    echo "📧 修改收件人:"
    echo "   编辑 EMAIL_RECIPIENT 变量"
    echo ""
    echo "========================================="
}

# ==========================================
# 🚀 主程序
# ==========================================
case "$1" in
    "show")
        show_config
        ;;
    "update")
        test_config && update_schedule
        ;;
    "test")
        test_config
        ;;
    "current")
        show_current_schedule
        ;;
    *)
        show_usage
        ;;
esac 